// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WordRace.Models;

namespace WordRace.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WordRace.Models.Connection", b =>
                {
                    b.Property<int>("ConnectionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("UserID");

                    b.Property<int>("WordID");

                    b.HasKey("ConnectionID");

                    b.HasIndex("UserID");

                    b.HasIndex("WordID");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("WordRace.Models.MinusWord", b =>
                {
                    b.Property<int>("MinusWordID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("WordID");

                    b.HasKey("MinusWordID");

                    b.HasIndex("WordID");

                    b.ToTable("MinusWords");
                });

            modelBuilder.Entity("WordRace.Models.PlusWord", b =>
                {
                    b.Property<int>("PlusWordID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("WordID");

                    b.HasKey("PlusWordID");

                    b.HasIndex("WordID");

                    b.ToTable("PlusWords");
                });

            modelBuilder.Entity("WordRace.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Points");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WordRace.Models.Word", b =>
                {
                    b.Property<int>("WordID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("WordID");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("WordRace.Models.Connection", b =>
                {
                    b.HasOne("WordRace.Models.User", "Person")
                        .WithMany("WordList")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WordRace.Models.Word", "Word")
                        .WithMany("Users")
                        .HasForeignKey("WordID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WordRace.Models.MinusWord", b =>
                {
                    b.HasOne("WordRace.Models.Word", "Root")
                        .WithMany("MinusWords")
                        .HasForeignKey("WordID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WordRace.Models.PlusWord", b =>
                {
                    b.HasOne("WordRace.Models.Word", "Root")
                        .WithMany("PlusWords")
                        .HasForeignKey("WordID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
